--scfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALMOST_FULL_VALUE=900 DEVICE_FAMILY="Cyclone IV GX" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=32 LPM_WIDTHU=10 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" almost_full clock data empty full q rdreq sclr wrreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 12.1SP1 cbx_altdpram 2013:01:31:18:04:58:SJ cbx_altsyncram 2013:01:31:18:04:59:SJ cbx_cycloneii 2013:01:31:18:04:59:SJ cbx_fifo_common 2013:01:31:18:04:57:SJ cbx_lpm_add_sub 2013:01:31:18:04:59:SJ cbx_lpm_compare 2013:01:31:18:04:59:SJ cbx_lpm_counter 2013:01:31:18:04:59:SJ cbx_lpm_decode 2013:01:31:18:04:59:SJ cbx_lpm_mux 2013:01:31:18:04:59:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_scfifo 2013:01:31:18:04:59:SJ cbx_stratix 2013:01:31:18:04:59:SJ cbx_stratixii 2013:01:31:18:04:59:SJ cbx_stratixiii 2013:01:31:18:05:00:SJ cbx_stratixv 2013:01:31:18:05:00:SJ cbx_util_mgl 2013:01:31:18:04:59:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_dpfifo_1k01 (clock, data[31..0], rreq, sclr, wreq)
RETURNS ( empty, full, q[31..0], usedw[9..0]);

--synthesis_resources = lut 30 M9K 4 reg 33 
SUBDESIGN scfifo_sg31
( 
	almost_full	:	output;
	clock	:	input;
	data[31..0]	:	input;
	empty	:	output;
	full	:	output;
	q[31..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_1k01;
	dffe_af : dffe;
	comparison_af0	: WIRE;
	comparison_af1	: WIRE;
	comparison_af2	: WIRE;
	comparison_af3	: WIRE;
	comparison_af4	: WIRE;
	comparison_af5	: WIRE;
	comparison_af6	: WIRE;
	comparison_af7	: WIRE;
	comparison_af8	: WIRE;
	comparison_af9	: WIRE;
	comparison_pre_af0	: WIRE;
	comparison_pre_af1	: WIRE;
	comparison_pre_af2	: WIRE;
	comparison_pre_af3	: WIRE;
	comparison_pre_af4	: WIRE;
	comparison_pre_af5	: WIRE;
	comparison_pre_af6	: WIRE;
	comparison_pre_af7	: WIRE;
	comparison_pre_af8	: WIRE;
	comparison_pre_af9	: WIRE;
	wire_af[9..0]	: WIRE;
	wire_pre_af[9..0]	: WIRE;

BEGIN 
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_af.clk = clock;
	dffe_af.d = ((dffe_af.q & (dffe_af.q $ (sclr # ((comparison_af9 & (! wrreq)) & rdreq)))) # ((! dffe_af.q) & ((((! sclr) & comparison_pre_af9) & wrreq) & (! rdreq))));
	almost_full = dffe_af.q;
	comparison_af0 = (dpfifo.usedw[0..0] $ wire_af[0..0]);
	comparison_af1 = ((dpfifo.usedw[1..1] $ wire_af[1..1]) & comparison_af0);
	comparison_af2 = ((dpfifo.usedw[2..2] $ wire_af[2..2]) & comparison_af1);
	comparison_af3 = ((dpfifo.usedw[3..3] $ wire_af[3..3]) & comparison_af2);
	comparison_af4 = ((dpfifo.usedw[4..4] $ wire_af[4..4]) & comparison_af3);
	comparison_af5 = ((dpfifo.usedw[5..5] $ wire_af[5..5]) & comparison_af4);
	comparison_af6 = ((dpfifo.usedw[6..6] $ wire_af[6..6]) & comparison_af5);
	comparison_af7 = ((dpfifo.usedw[7..7] $ wire_af[7..7]) & comparison_af6);
	comparison_af8 = ((dpfifo.usedw[8..8] $ wire_af[8..8]) & comparison_af7);
	comparison_af9 = ((dpfifo.usedw[9..9] $ wire_af[9..9]) & comparison_af8);
	comparison_pre_af0 = (dpfifo.usedw[0..0] $ wire_pre_af[0..0]);
	comparison_pre_af1 = ((dpfifo.usedw[1..1] $ wire_pre_af[1..1]) & comparison_pre_af0);
	comparison_pre_af2 = ((dpfifo.usedw[2..2] $ wire_pre_af[2..2]) & comparison_pre_af1);
	comparison_pre_af3 = ((dpfifo.usedw[3..3] $ wire_pre_af[3..3]) & comparison_pre_af2);
	comparison_pre_af4 = ((dpfifo.usedw[4..4] $ wire_pre_af[4..4]) & comparison_pre_af3);
	comparison_pre_af5 = ((dpfifo.usedw[5..5] $ wire_pre_af[5..5]) & comparison_pre_af4);
	comparison_pre_af6 = ((dpfifo.usedw[6..6] $ wire_pre_af[6..6]) & comparison_pre_af5);
	comparison_pre_af7 = ((dpfifo.usedw[7..7] $ wire_pre_af[7..7]) & comparison_pre_af6);
	comparison_pre_af8 = ((dpfifo.usedw[8..8] $ wire_pre_af[8..8]) & comparison_pre_af7);
	comparison_pre_af9 = ((dpfifo.usedw[9..9] $ wire_pre_af[9..9]) & comparison_pre_af8);
	empty = dpfifo.empty;
	full = dpfifo.full;
	q[] = dpfifo.q[];
	wire_af[] = ( B"0", B"0", B"0", B"1", B"1", B"1", B"1", B"0", B"1", B"1");
	wire_pre_af[] = ( B"0", B"0", B"0", B"1", B"1", B"1", B"1", B"1", B"0", B"0");
END;
--VALID FILE
