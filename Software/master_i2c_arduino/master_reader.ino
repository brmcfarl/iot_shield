// Wire Master Reader
// by Nicholas Zambetti <http://www.zambetti.com>

// Demonstrates use of the Wire library
// Reads data from an I2C/TWI slave device
// Refer to the "Wire Slave Sender" example for use with this

// Created 29 March 2006

// This example code is in the public domain.

int address = 54;
int i = 0;

int hiRegs[] = {
0x01, //1
0x01, //2
0x30, //3
0x30, //4
0x30, //5
0x30, //6
0x31, //7
0x38, //8
0x38, //9
0x38, //10
0x37, //11
0x36, //12
0x36, //13
0x50, //14
0x50, //15
0x50, //16
0x50, //17
0x5a, //18
0x30, //19
0x30, //20
0x30, //21
0x30, //22
0x30, //23
0x30, //24
0x30, //25
0x30, //26
0x3a, //27
0x3a, //28
0x3c, //29
0x3b, //30
0x38, //31
0x38, //32
0x38, //33
0x38, //34
0x38, //35
0x38, //36
0x37, //37
0x37, //38
0x38, //39
0x38, //40
0x38, //41
0x38, //42
0x38, //43
0x38, //44
0x38, //45
0x38, //46
0x38, //47
0x38, //48
0x38, //49
0x38, //50
0x38, //51
0x38, //52
0x36, //53
0x36, //54
0x36, //55
0x36, //56
0x36, //57
0x36, //58
0x36, //59
0x36, //60
0x37, //61
0x37, //62
0x37, //63
0x37, //64
0x37, //65
0x37, //66
0x37, //67
0x3f, //68
0x3f, //69
0x3f, //70
0x3a, //71
0x3a, //72
0x3a, //73
0x3a, //74
0x3a, //75
0x3a, //76
0x3a, //77
0x3a, //78
0x3a, //79
0x3a, //80
0x3a, //81
0x3a, //82
0x40, //83
0x40, //84
0x40, //85
0x48, //86
0x40, //87
0x40, //88
0x01, //89
0x30 //90
};
int lowRegs[] = {
0x00, //1
0x03, //2
0x34, //3
0x35, //4
0x36, //5
0x3c, //6
0x06, //7
0x21, //8
0x20, //9
0x27, //10
0x0c, //11
0x12, //12
0x18, //13
0x00, //14
0x01, //15
0x02, //16
0x03, //17
0x00, //18
0x00, //19
0x01, //20
0x02, //21
0x16, //22
0x17, //23
0x18, //24
0x1c, //25
0x1d, //26
0x18, //27
0x19, //28
0x01, //29
0x07, //30
0x0c, //31
0x0d, //32
0x0e, //33
0x0f, //34
0x14, //35
0x15, //36
0x08, //37
0x09, //38
0x08, //39
0x09, //40
0x0a, //41
0x0b, //42
0x00, //43
0x01, //44
0x02, //45
0x03, //46
0x04, //47
0x05, //48
0x06, //49
0x07, //50
0x11, //51
0x13, //52
0x30, //53
0x32, //54
0x33, //55
0x34, //56
0x36, //57
0x20, //58
0x21, //59
0x00, //60
0x04, //61
0x03, //62
0x15, //63
0x17, //64
0x31, //65
0x0b, //66
0x05, //67
0x05, //68
0x06, //69
0x01, //70
0x08, //71
0x09, //72
0x0a, //73
0x0b, //74
0x0d, //75
0x0e, //76
0x0f, //77
0x10, //78
0x1b, //79
0x1e, //80
0x11, //81
0x1f, //82
0x01, //83
0x04, //84
0x00, //85
0x37, //86
0x50, //87
0x51, //88
0x00, //89
0x35 //90
};
int valueRegs[] = {
0x00, //1
0x01, //2
0x1a, //3
0x21, //4
0x7d, //5
0x11, //6
0xf5, //7
0x06, //8
0x00, //9
0xec, //10
0x03, //11
0x5b, //12
0x04, //13
0x06, //14
0x00, //15
0x40, //16
0x08, //17
0x08, //18
0x00, //19
0x00, //20
0x00, //21
0x08, //22
0xe0, //23
0x44, //24
0xf8, //25
0xf0, //26
0x00, //27
0xf8, //28
0x80, //29
0x0c, //30
0x0a, //31
0x8c, //32
0x07, //33
0xb6, //34
0x11, //35
0x11, //36
0x64, //37
0x12, //38
0x0a, //39
0x20, //40
0x07, //41
0x98, //42
0x00, //43
0x00, //44
0x00, //45
0x00, //46
0x0a, //47
0x3f, //48
0x07, //49
0xa3, //50
0x10, //51
0x06, //52
0x2e, //53
0xe2, //54
0x23, //55
0x44, //56
0x06, //57
0x64, //58
0xe0, //59
0x37, //60
0xa0, //61
0x5a, //62
0x78, //63
0x01, //64
0x02, //65
0x60, //66
0x1a, //67
0x02, //68
0x10, //69
0x0a, //70
0x01, //71
0x28, //72
0x00, //73
0xf6, //74
0x08, //75
0x06, //76
0x58, //77
0x50, //78
0x58, //79
0x50, //80
0x60, //81
0x28, //82
0x02, //83
0x04, //84
0x09, //85
0x28, //86
0x6e, //87
0x8f, //88
0x01, //89
0x41 //90
};

#include <Wire.h>
int j = 0;
void setup()
{
  Wire.begin();        // join i2c bus (address optional for master)
  Serial.begin(9600);  // start serial for output
}
int correctCounter = 0;
void loop()
{

  for(; j < (sizeof(hiRegs) / sizeof(int)); j++)
  {
    Wire.beginTransmission(address);
    //Wire.requestFrom(address, 1);  
    Wire.write(hiRegs[j]);
    Wire.write(lowRegs[j]);
    Wire.write(valueRegs[j]);
    Wire.endTransmission();
    //delay(1);
    Wire.beginTransmission(address);
    Wire.write(hiRegs[j]);  // set read register
    Wire.write(lowRegs[j]);  // set read register
    int x = Wire.endTransmission(); 
    
    Wire.requestFrom(address, 1); 
    while(Wire.available())    // slave may send less than requested
    { 
      char c = Wire.read(); // receive a byte as character
      if(c == (char)valueRegs[j])
      {
        correctCounter++; 
      }
      else
      {
        Serial.print("Incorrect at j= ");
        Serial.println(j + 1);
        Serial.print("Correct value: ");
        Serial.print(valueRegs[j],HEX);
        Serial.print("  Read value: ");
        Serial.println(c,HEX);
        Serial.print("At reg: ");
        Serial.print(hiRegs[j],HEX);
        Serial.println(lowRegs[j],HEX);
      }
    }
    delay(1);
  }
  delay(1000);
}


